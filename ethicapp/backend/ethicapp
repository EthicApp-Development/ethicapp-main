#!/usr/bin/env node
import { createRequire } from "module";
const require = createRequire(import.meta.url);
require("log-timestamp");

import app from "../app.js";
import http from "http";
import debugLib from "debug";
import { Server as SocketIO } from "socket.io";
import socketConfig from "./config/socket.config.js";

const debug = debugLib("ethicapp:server");

const DEFAULT_PORT = "8080";

// Set web server port
const port = normalizePort(process.env.NODE_PORT || DEFAULT_PORT);
app.set("port", port);

// Listen on provided port, on all network interfaces
if (!module.parent) {
    const server = http.createServer(app);
    server.listen(port);
    server.on("error", onError);
    server.on("listening", onListening);

    // Set up socket.io
    const io = new SocketIO(server);
    socketConfig.configSocket(io);
}

/**
 * Normalize a port into a number, string, or false.
 * @param {string} val The port value to normalize.
 * @returns {number|string|false} The normalized port or pipe.
 */
function normalizePort(val) {
    const parsedPort = parseInt(val, 10);
    if (isNaN(parsedPort)) {
        // named pipe
        return val;
    }
    if (parsedPort > 0) {
        // port number
        return parsedPort;
    }
    console.error(`Invalid argument: port number ${parsedPort} is invalid.`);
    process.exit(2);
}

/**
 * Event listener for HTTP server "error" event.
 * @param {Error} error The error object.
 */
function onError(error) {
    if (error.syscall !== "listen") {
        throw error;
    }

    const bind = typeof port === "string" ? `Pipe ${port}` : `Port ${port}`;

    // Handle specific listen errors with friendly messages
    switch (error.code) {
    case "EACCES":
        console.error(`Error: ${bind} requires elevated privileges`);
        process.exit(1);
        break;
    case "EADDRINUSE":
        console.error(`Error: ${bind} is already in use`);
        process.exit(1);
        break;
    default:
        throw error;
    }
}

/**
 * Event listener for HTTP server "listening" event.
 */
function onListening() {
    const addr = app.get("port");
    console.debug(`Server started, listening on port ${addr}`);
    debug(`Listening on port ${addr}`);
}
