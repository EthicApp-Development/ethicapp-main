#!/usr/bin/env node

require("log-timestamp");
var app = module.exports = require("../app");
var http = require("http");
var debug = require("debug")("ethicapp:server");

const DEFAULT_PORT = "8080";

// Set web server port
var port = normalizePort(process.env.PORT || DEFAULT_PORT);
app.set("port", port);

// Listen on provided port, on all network interfaces
if (!module.parent) {
    var server = http.createServer(app);
    server.listen(port);
    server.on("error", onError);
    server.on("listening", onListening);
    var io = require("socket.io")(server);
    var socket = require("./config/socket.config");
    socket.configSocket(io);
}

/**
 * @param {string} val Whether a port or a named pipe.
 * @returns {string|number} The parsed port as an integer, or the `val` itself it is a pipe.
 */
function normalizePort(val) {
    var parsedPort = parseInt(val, 10);
    if (isNaN(parsedPort)) {
        // named pipe
        return val;
    }
    if (parsedPort > 0) {
        // port number
        return parsedPort;
    }
    console.error(`Invalid argument: port number ${parsedPort} is invalid.`);
    process.exit(2);
}

/**
 * Event listener for HTTP server "error" event.
 */
function onError(error) {
    if (error.syscall !== "listen") {
        throw error;
    }

    var bind = typeof port === "string"
        ? "Pipe " + port
        : "Port " + port;

    // Handle specific listen errors with friendly messages
    switch (error.code) {
    case "EACCES":
        console.error(`Error: ${bind} requires elevated privileges`);
        process.exit(1);
        break;
    case "EADDRINUSE":
        console.error(`Error: ${bind} is already in use`);
        process.exit(1);
        break;
    default:
        throw error;
    }
}

/**
 * Event listener for HTTP server "listening" event.
 */
function onListening() {
    console.debug(`Server started, listening on port ${port}`);
    debug(`Listening on port ${port}`);
}
