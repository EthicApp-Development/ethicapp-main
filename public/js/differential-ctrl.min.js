"use strict";

var BASE_APP = window.location.href.replace("differential", "");

var app = angular.module("Differential", ["ngSanitize", "ui.bootstrap", 'ui.tree', 'btford.socket-io', "timer", "ui-notification", "luegg.directives"]);

app.factory("$socket", ["socketFactory", function (socketFactory) {
    return socketFactory();
}]);

app.controller("DifferentialController", ["$scope", "$http", "$timeout", "$socket", "Notification", "$sce", "$uibModal", function ($scope, $http, $timeout, $socket, Notification, $sce, $uibModal) {
    var self = $scope;

    self.iteration = 1;
    self.myUid = -1;
    self.documents = [];
    self.dfs = [];
    self.showDoc = true;
    self.selectedDocument = 0;
    self.selectedDF = 0;

    self.ansIter1 = {};
    self.ansIter2 = {};
    self.chatMsgs = {};
    self.chatmsg = "";
    self.chatmsgreply = null;
    self.tmId = -1;
    self.sesId = -1;
    self.finished = false;

    self.chatExp = true;

    self.userAnon = {};

    self.sesStatusses = ["individual", "anon", "discussion", "finished"];

    self.lang = "spanish";

    self.init = function () {
        self.getSesInfo();
        $socket.on("stateChange", function (data) {
            console.log("SOCKET.IO", data);
            if (data.ses == self.sesId) {
                window.location.reload();
            }
        });
        $socket.on("chatMsg", function (data) {
            console.log("SOCKET.IO", data);
            if (data.ses == self.sesId && data.tmid == self.tmId && self.iteration == 3) {
                updateChat();
            }
        });
        $socket.on("diffReceived", function (data) {
            console.log("SOCKET.IO", data);
            if (data.ses == self.sesId) {
                self.openDetails(data);
            }
        });
        self.getMe();
    };

    self.getSesInfo = function () {
        $http({ url: "get-ses-info", method: "post" }).success(function (data) {
            self.iteration = data.iteration + 1;
            self.myUid = data.uid;
            self.sesName = data.name;
            self.sesId = data.id;
            self.sesSTime = data.stime;
            self.sesDescr = data.descr;
            // self.useConfidence = (data.options != null && data.options.includes("C"));
            if (self.iteration > 1) {
                $http({ url: "get-team-diff-selection", method: "post", data: { iteration: 1 } }).success(function (data) {
                    data.forEach(function (ans) {
                        self.ansIter1[ans.did] = self.ansIter1[ans.did] || [];
                        self.ansIter1[ans.did].push({ select: ans.sel, comment: ans.comment, uid: ans.uid });
                    });
                });
            }
            if (self.iteration > 2) {
                $http({ url: "get-team-diff-selection", method: "post", data: { iteration: 2 } }).success(function (data) {
                    data.forEach(function (ans) {
                        self.ansIter2[ans.did] = self.ansIter2[ans.did] || [];
                        self.ansIter2[ans.did].push({ select: ans.sel, comment: ans.comment, uid: ans.uid });
                    });
                });
            }
            if (self.iteration >= 4) {
                self.finished = true;
            }
            if (self.iteration > 0) {
                self.loadDocuments();
                self.loadDifferentials();
                $http.post("get-anon-team").success(function (data) {
                    var alph = "ABCDEFGHIJKLMNOPQRSTUVWXYZ";
                    data.forEach(function (u, i) {
                        self.userAnon[u.id] = alph[i];
                        self.tmId = u.tmid;
                    });
                });
            }
        });
    };

    var updateChat = function updateChat(count) {
        $http.post("get-chat-msgs").success(function (data) {
            self.chatMsgs = {};
            self.dfs.forEach(function (e) {
                e.c = 0;
            });
            data.forEach(function (msg) {
                var df = self.dfs.find(function (e) {
                    return e.id == msg.did;
                });
                df.c = df.c ? df.c + 1 : 1;
                if (count || df.id == self.dfs[self.selectedDF].id) df.cr = df.c;
                if (msg.parent_id) msg.parent = data.find(function (e) {
                    return e.id == msg.parent_id;
                });
                self.chatMsgs[msg.did] = self.chatMsgs[msg.did] || [];
                self.chatMsgs[msg.did].push(msg);
            });
        });
    };

    self.getMe = function () {
        $http.post("get-my-name").success(function (data) {
            self.username = data.name;
            if(data.lang=='spanish'){
                self.lang = 'english';
            }
            else{
                self.lang = 'spanish';
            }
            self.updateLang(self.lang);
        });
    };

    /*self.updateTeam = () => {
        $http({url: "get-team", method: "post"}).success((data) => {
            self.team = {};
            self.teamstr = data.map(e => e.name).join(", ");
            data.forEach((tm) => {
                self.team[tm.id] = tm.name;
            });
            if (data.length > 0) {
                self.teamId = data[0].tmid;
                self.teamProgress = data[0].progress;
                if (self.iteration == 3)
                    self.selectQuestion(self.teamProgress);
            }
        });
    };*/

    self.loadDocuments = function () {
        $http({ url: "get-documents", method: "post" }).success(function (data) {
            self.documents = data;
        });
    };

    self.loadDifferentials = function () {
        $http({ url: "get-differentials", method: "post" }).success(function (data) {
            self.dfs = data;
            console.log(self.dfs);
            self.loadDiffSelection();
            updateChat(true);
        });
    };

    self.loadDiffSelection = function () {
        var postdata = {
            iteration: self.iteration
        };
        $http.post("get-diff-selection", postdata).success(function (data) {
            data.forEach(function (d) {
                var df = self.dfs.find(function (e) {
                    return d.did == e.id;
                });
                df.select = d.sel;
                df.comment = d.comment;
            });
        });
    };

    self.selectDocument = function (i) {
        self.selectedDocument = i;
        self.showDoc = true;
    };

    self.selectDF = function (i) {
        if (self.dfs[self.selectedDF].dirty) {
            notify("Error", "Debe completar el diferencial antes de cambiar");
            return;
        }
        self.selectedDF = i;
        self.dfs[self.selectedDF].cr = self.dfs[self.selectedDF].c;
        self.showDoc = false;
        self.chatmsg = "";
    };

    self.sendDFSel = function () {
        var df = self.dfs[self.selectedDF];
        if (df.select == null || df.select == -1 || df.comment == null || df.comment == "") {
            notify("Error", "El diferencial no está completo");
            return;
        }
        var postdata = {
            sel: df.select,
            comment: df.comment,
            did: df.id,
            iteration: self.iteration
        };
        $http.post("send-diff-selection", postdata).success(function (data) {
            df.dirty = false;
        });
    };

    self.finishState = function () {
        if (self.finished) {
            return;
        }
        if (self.iteration <= 3) {
            if (self.dfs.some(function (e) {
                return e.id == null;
            })) {
                notify("Error", "Falta responder algunos diferenciales semánticos");
                return;
            }
        }
        var confirm = window.confirm("¿Esta seguro que desea terminar la actividad?\nEsto implica no volver a poder editar sus respuestas");
        if (confirm) {
            var postdata = { status: self.iteration + 2 };
            $http({ url: "record-finish", method: "post", data: postdata }).success(function (data) {
                self.hasFinished = true;
                self.finished = true;
                console.log("FINISH");
                //if(self.iteration == 3)
                //    self.updateSignal();
            });
        }
    };

    self.sendChatMsg = function () {
        var postdata = {
            did: self.dfs[self.selectedDF].id,
            content: self.chatmsg,
            tmid: self.tmId,
            parent_id: self.chatmsgreply
        };
        $http.post("add-chat-msg", postdata).success(function (data) {
            self.chatmsg = "";
            self.chatmsgreply = null;
        });
    };

    self.getDocURL = function () {
        return $sce.trustAsResourceUrl("https://docs.google.com/viewer?url=" + BASE_APP + self.documents[self.selectedDocument].path + "&embedded=true");
    };

    self.dfSelect = function (i) {
        if (self.finished || self.hasFinished) return;
        self.dfs[self.selectedDF].select = i;
        self.dfs[self.selectedDF].dirty = true;
    };

    var notify = function notify(title, message, closable) {
        $uibModal.open({
            template: '<div><div class="modal-header"><h4>' + title + '</h4></div><div class="modal-body"><p>' + message + '</p></div></div>'
        });
    };

    self.openComment = function (com) {
        notify("Comentario", com);
    };

    self.showInfo = function () {
        notify("Factor Detonante", self.sesDescr, false);
    };

    self.updateLang = function (lang) {
        $http.get("data/" + lang + ".json").success(function (data) {
            window.DIC = data;
        });
    };

    self.changeLang = function () {
        self.lang = self.lang == "english" ? "spanish" : "english";
        self.updateLang(self.lang);
    };

    self.openDetails = function (_data) {
        $uibModal.open({
            templateUrl: "templ/direct-content.html",
            controller: "DirectContentController",
            controllerAs: "vm",
            scope: self,
            resolve: {
                data: function data() {
                    return _data;
                }
            }
        });
    };

    self.setReply = function (msg) {
        self.chatmsgreply = msg == null ? null : msg.id;
        document.getElementById("chat-input").focus();
    };

    self.init();
}]);

app.controller("DirectContentController", ["$scope", "$uibModalInstance", "data", function ($scope, $uibModalInstance, data) {
    var vm = this;
    vm.data = data;
    vm.data.title = "Diferencial recibido";

    setTimeout(function () {
        console.log(vm);
        document.getElementById("modal-content").innerHTML = vm.data.content;
    }, 500);

    vm.cancel = function () {
        $uibModalInstance.dismiss('cancel');
    };
}]);

window.DIC = null;
window.warnDIC = {};

app.filter('lang', function () {
    filt.$stateful = true;
    return filt;

    function filt(label) {
        if (window.DIC == null) return;
        if (window.DIC[label]) return window.DIC[label];
        if (!window.warnDIC[label]) {
            console.warn("Cannot find translation for ", label);
            window.warnDIC[label] = true;
        }
        return label;
    }
});

var indexById = function indexById(arr, id) {
    return arr.findIndex(function (e) {
        return e.id == id;
    });
};

app.directive('bindHtmlCompile', ['$compile', function ($compile) {
    return {
        restrict: 'A',
        link: function link(scope, element, attrs) {
            scope.$watch(function () {
                return scope.$eval(attrs.bindHtmlCompile);
            }, function (value) {
                element.html(value && value.toString());
                var compileScope = scope;
                if (attrs.bindHtmlScope) {
                    compileScope = scope.$eval(attrs.bindHtmlScope);
                }
                $compile(element.contents())(compileScope);
            });
        }
    };
}]);

app.filter('linkfy', function () {
    var replacePattern1 = /(\b(https?|ftp):\/\/[-A-Z0-9+&@#\/%?=~_|!:,.;]*[-A-Z0-9+&@#\/%=~_|])/gim;
    var replacePattern2 = /(^|[^\/])(www\.[\S]+(\b|$))/gim;
    var replacePattern3 = /(\w+@[a-zA-Z_]+?\.[a-zA-Z]{2,6})/gim;

    return function (text, target, otherProp) {
        if (text == null) return text;
        angular.forEach(text.match(replacePattern1), function (url) {
            text = text.replace(replacePattern1, "<a href=\"$1\" target=\"_blank\">$1</a>");
        });
        angular.forEach(text.match(replacePattern2), function (url) {
            text = text.replace(replacePattern2, "$1<a href=\"http://$2\" target=\"_blank\">$2</a>");
        });
        angular.forEach(text.match(replacePattern3), function (url) {
            text = text.replace(replacePattern3, "<a href=\"mailto:$1\">$1</a>");
        });
        // console.log("HOLA");
        return text;
    };
});
