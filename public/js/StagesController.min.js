"use strict";

var _slicedToArray = function () {
    function sliceIterator(arr, i) {
        var _arr = [];var _n = true;var _d = false;var _e = undefined;try {
            for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {
                _arr.push(_s.value);if (i && _arr.length === i) break;
            }
        } catch (err) {
            _d = true;_e = err;
        } finally {
            try {
                if (!_n && _i["return"]) _i["return"]();
            } finally {
                if (_d) throw _e;
            }
        }return _arr;
    }return function (arr, i) {
        if (Array.isArray(arr)) {
            return arr;
        } else if (Symbol.iterator in Object(arr)) {
            return sliceIterator(arr, i);
        } else {
            throw new TypeError("Invalid attempt to destructure non-iterable instance");
        }
    };
}();

window.StagesController = function ($scope, $http, Notification, $uibModal) {
    var self = $scope;

    self.stages = [];
    console.log(self.flang);

    var klg = function klg(k1, k2) {
        return {
            key: k1 + (k2 == null ? "" : " " + k2),
            name: self.flang(k1) + (k2 == null ? "" : " " + self.flang(k2))
        };
    };

    self.readonly = false;

    self.stage = {
        type: null,
        anon: false,
        chat: false,
        prevResponses: [],
        question: ""
    };

    self.stageRoles = [];

    self.roles = [];
    self.jroles = [];
    self.colors = ["bg-qblue", "bg-red", "bg-green", "bg-yellow", "bg-purple", "bg-white"];
    self.dfs = [];

    self.groups = [];
    self.groupopt = {
        met: "previous",
        num: null
    };

    self.currentStage = -1;

    self.setCurrentStage = function (i) {
        if (i != -1) {
            self.readonly = true;
            var postdata = {
                stageid: self.stages[i].id
            };
            if (self.selectedSes.type == "R") {
                $http({ url: "get-actors", method: "post", data: postdata }).success(function (data) {
                    self.roles = data;
                    self.roles.forEach(function (r) {
                        if (r.justified && r.jorder) {
                            r.type = "order";
                        } else if (r.justified) {
                            r.type = "role";
                        }
                        r.wc = r.word_count;
                    });
                });
            } else if (self.selectedSes.type == "T") {
                $http({ url: "get-differentials-stage", method: "post", data: postdata }).success(function (data) {
                    self.dfs = data;
                    self.dfs.forEach(function (df) {
                        df.wc = df.word_count;
                        df.name = df.title;
                    });
                });
            } else if (self.selectedSes.type == "J") {
                $http({ url: "get-actors", method: "post", data: postdata }).success(function (data) {
                    self.roles = data;
                    self.roles.forEach(function (r) {
                        if (r.justified && r.jorder) {
                            r.type = "order";
                        } else if (r.justified) {
                            r.type = "role";
                        }
                        r.wc = r.word_count;
                    });
                });
            }
            $http({ url: "group-proposal-stage", method: "post", data: postdata }).success(function (data) {
                self.groups = data;
            });
            self.stage = self.stages[i];
        } else {
            self.readonly = false;
            self.stage = {
                type: null,
                anon: false,
                chat: false,
                question: self.stage.question,
                prevResponses: []
            };
        }
        self.currentStage = i;
    };

    self.getStages = function () {
        var postdata = {
            sesid: self.selectedSes.id
        };
        $http({ url: "get-admin-stages", method: "post", data: postdata }).success(function (data) {
            self.stages = data;
            self.shared.stagesMap = {};
            data.forEach(function (s) {
                self.shared.stagesMap[s.id] = s;
            });
            self.stage.question = self.stages.length > 0 ? self.stages[self.stages.length - 1].question : "";
            var postdata = {
                stageid: self.selectedSes.current_stage
            };
            if (self.stages.length == 0) {
                var _postdata = {
                    sesid: self.selectedSes.id
                };
                $http.post("get-draft", _postdata).success(function (data) {
                    var d = JSON.parse(data.data);
                    self.dfs = d.dfs;
                    self.roles = d.roles;
                    self.jroles = d.jroles;
                });
            } else if (self.selectedSes.type == "R") {
                $http({ url: "get-actors", method: "post", data: postdata }).success(function (data) {
                    self.roles = data;
                    self.roles.forEach(function (r) {
                        if (r.justified && r.jorder) {
                            r.type = "order";
                        } else if (r.justified) {
                            r.type = "role";
                        }
                        r.wc = r.word_count;
                    });
                });
            } else if (self.selectedSes.type == "T") {
                $http({ url: "get-differentials-stage", method: "post", data: postdata }).success(function (data) {
                    self.dfs = data;
                    self.dfs.forEach(function (df) {
                        df.wc = df.word_count;
                        df.name = df.title;
                    });
                });
            } else if (self.selectedSes.type == "J") {
                $http({ url: "get-actors", method: "post", data: postdata }).success(function (data) {
                    self.roles = data;
                    self.roles.forEach(function (r) {
                        if (r.justified && r.jorder) {
                            r.type = "order";
                        } else if (r.justified) {
                            r.type = "role";
                        }
                        r.wc = r.word_count;
                    });
                });
                $http({ url: "get-jigsaw-roles", method: "post", data: {
                        sesid: self.selectedSes.id
                    } }).success(function (data) {
                    self.jroles = data;
                    self.inputAssignedRoles();
                });
            }
            $http({ url: "group-proposal-stage", method: "post", data: postdata }).success(function (data) {
                self.groups = data;
                if (data.length > 0) {
                    self.groupopt.num = self.groups[0].length;
                }
                self.shared.groups = self.groups;
                self.shared.groupByUid = {};
                data.forEach(function (s, i) {
                    s.forEach(function (u) {
                        self.shared.groupByUid[u.uid] = { index: i + 1, tmid: u.tmid };
                    });
                });
                console.log(self.shared.groupByUid);
            });
            console.log(self.selectedSes, data);
            if (self.selectedSes.status >= 3) {
                self.shared.setIterationIndicator(data[data.length - 1].id);
                self.setCurrentStage(data.length - 1);
            }
        });
    };

    self.changeStage = function (i) {
        self.currentStage = i;
    };

    self.addRole = function () {
        self.roles.push({
            name: "",
            type: "role"
        });
    };

    self.addJRole = function () {
        self.jroles.push({
            name: "",
            description: "",
            edit: true
        });
    };

    self.setRoleType = function (role, type) {
        if (role.type == type) {
            role.type = null;
            return;
        }
        if (self.roles.find(function (e) {
            return e.type != null && e.type != type;
        })) {
            self.setAllRolesType(null);
        }

        role.type = type;
    };

    self.setAllRolesType = function (type) {
        for (var i = 0; i < self.roles.length; i++) {
            self.roles[i].type = type;
        }
    };

    self.removeRole = function (index) {
        if (window.confirm("¿Esta seguro de eliminar este rol?")) {
            self.roles.splice(index, 1);
        }
    };

    self.removeJRole = function (index) {
        if (window.confirm("¿Esta seguro de eliminar este rol?")) {
            self.jroles.splice(index, 1);
        }
    };

    self.removeDF = function (index) {
        if (window.confirm("¿Esta seguro de eliminar esta pregunta?")) {
            self.dfs.splice(index, 1);
        }
    };

    self.checkStage = function () {
        if (self.selectedSes.type == "T") {
            if (self.dfs.some(function (e) {
                return e.name == "" || e.tleft == "" || e.tright == "";
            })) {
                return "Hay diferenciales con datos faltantes";
            }
        }
        if (self.selectedSes.type == "R" || self.selectedSes.type == "J") {
            if (self.roles.some(function (e) {
                return e.name == "";
            })) {
                return "Hay roles o lineas de acción con datos faltantes";
            }
        }
        if (self.selectedSes.type == "J") {
            if (self.jroles.some(function (e) {
                return e.name == "" || e.description == "";
            })) {
                return "Hay roles con datos faltantes";
            }
        }
        // let a = (Date.now() - +new Date(self.selectedSes.time))/1000/60;
        // if(a < 2){
        //     return "La etapa lleva menos de dos minutos activa";
        // }
    };

    self.sendStage = function () {
        var s = self.stage;
        var arr = self.selectedSes.type == "R" || self.selectedSes.type == "J" ? self.roles : self.dfs;
        var isFirst = self.stages.length == 0;
        console.log(isFirst);
        if (s.type == null || arr.length == 0 || s.type == "team" && (self.groups == null || self.groups.length == 0)) {
            Notification.error("Hay datos de configuración faltantes");
            return;
        }
        var a = self.checkStage();
        if (a) {
            Notification.error(a);
            return;
        }
        var confirm = window.confirm("¿Esta seguro que quiere ir a la siguiente etapa? (Etapa " + (self.stages.length + 1) + ")");
        if (!confirm) {
            return;
        }
        var postdata = {
            number: self.stages.length + 1,
            question: s.question,
            grouping: s.type == "team" ? self.groupopt.num + ":" + self.groupopt.met : null,
            type: s.type,
            anon: s.anon,
            chat: s.chat,
            sesid: self.selectedSes.id,
            prev_ans: s.prevResponses.map(function (e) {
                return e.id;
            }).join(",")
        };
        $http({ url: "add-stage", method: "post", data: postdata }).success(function (data) {
            var stageid = data.id;
            if (stageid != null) {
                if (postdata.type == "team") {
                    self.acceptGroups(stageid);
                }
                if (self.selectedSes.type == "R") {
                    (function () {
                        var c = self.roles.length;
                        for (var i = 0; i < self.roles.length; i++) {
                            var role = self.roles[i];
                            var p = {
                                name: role.name,
                                jorder: role.type == "order",
                                justified: role.type != null,
                                word_count: role.wc,
                                stageid: stageid
                            };
                            $http({ url: "add-actor", method: "post", data: p }).success(function (data) {
                                console.log("Actor added");
                                c -= 1;
                                if (c == 0) {
                                    var pp = { sesid: self.selectedSes.id, stageid: stageid };
                                    $http({ url: "session-start-stage", method: "post", data: pp }).success(function (data) {
                                        Notification.success("Etapa creada correctamente");
                                        window.location.reload();
                                    });
                                }
                            });
                        }
                    })();
                } else if (self.selectedSes.type == "T") {
                    (function () {
                        var c = self.dfs.length;
                        for (var i = 0; i < self.dfs.length; i++) {
                            var df = self.dfs[i];
                            var p = {
                                name: df.name,
                                tleft: df.tleft,
                                tright: df.tright,
                                num: df.num,
                                orden: df.orden,
                                justify: df.justify,
                                stageid: stageid,
                                sesid: self.selectedSes.id,
                                word_count: df.wc
                            };
                            $http({ url: "add-differential-stage", method: "post", data: p }).success(function (data) {
                                c -= 1;
                                if (c == 0) {
                                    var pp = { sesid: self.selectedSes.id, stageid: stageid };
                                    $http({ url: "session-start-stage", method: "post", data: pp }).success(function (data) {
                                        Notification.success("Etapa creada correctamente");
                                        window.location.reload();
                                    });
                                }
                            });
                        }
                    })();
                } else if (self.selectedSes.type == "J") {
                    (function () {
                        var c = self.roles.length + (isFirst ? self.jroles.length : 0);
                        for (var i = 0; i < self.roles.length; i++) {
                            var role = self.roles[i];
                            var p = {
                                name: role.name,
                                jorder: role.type == "order",
                                justified: role.type != null,
                                word_count: role.wc,
                                stageid: stageid
                            };
                            console.log("Add Actor " + p.name);
                            $http({ url: "add-actor", method: "post", data: p }).success(function (data) {
                                console.log("Actor added");
                                c -= 1;
                                if (c == 0) {
                                    var pp = { sesid: self.selectedSes.id, stageid: stageid };
                                    $http({ url: "session-start-stage", method: "post", data: pp }).success(function (data) {
                                        Notification.success("Etapa creada correctamente");
                                        // window.location.reload()
                                    });
                                }
                            });
                        }
                        if (isFirst) {
                            for (var _i = 0; _i < self.jroles.length; _i++) {
                                var jrole = self.jroles[_i];
                                var _p = {
                                    name: jrole.name,
                                    sesid: self.selectedSes.id,
                                    description: jrole.description
                                };
                                console.log("Add JRole " + _p.name);
                                $http({ url: "add-jigsaw-role", method: "post", data: _p }).success(function (data) {
                                    console.log("JRole added");
                                    c -= 1;
                                    if (c == 0) {
                                        var pp = { sesid: self.selectedSes.id, stageid: stageid };
                                        $http({
                                            url: "session-start-stage",
                                            method: "post",
                                            data: pp
                                        }).success(function (data) {
                                            Notification.success("Etapa creada correctamente");
                                            // window.location.reload()
                                        });
                                    }
                                });
                            }
                        }
                    })();
                }
            } else {
                Notification.error("Error al crear la etapa");
            }
        });
    };

    self.setGroupal = function () {
        self.stage.type = 'team';
        self.methods = [klg("random"), klg("performance", "homog"), klg("performance", "heterg"), klg("knowledgeType", "homog"), klg("knowledgeType", "heterg")];
        if (self.groups.length > 0) {
            self.methods.unshift(klg("previous"));
        }
    };

    self.generateGroups = function (key) {
        console.log(self.groupopt.num, self.groupopt.met);
        if (self.selectedSes.grouped) {
            $http({
                url: "group-proposal-sel",
                method: "post",
                data: { sesid: self.selectedSes.id }
            }).success(function (data) {
                self.groups = data;
                self.shared.groups = self.groups;
                //self.groupsProp = angular.copy(self.groups);
                console.log("G", data);
                //self.groupNames = [];
            });
            return;
        }
        if (key == null && (self.groupopt.num < 1 || self.groupopt.num > self.users.length)) {
            Notification.error("Error en los parámetros de formación de grupos");
            return;
        }
        if (self.groupopt.met == "previous") {
            return;
        }

        var postdata = {
            sesid: self.selectedSes.id,
            gnum: self.groupopt.num,
            method: self.groupopt.met
        };

        console.log(postdata);

        var users = Object.values(self.users).filter(function (e) {
            return e.role == "A";
        });
        console.log(users);

        if (self.groupopt.met == "knowledgeType homog" || self.groupopt.met == "knowledgeType heterg") {
            self.groups = generateTeams(users, habMetric, self.groupopt.num, isDifferent(self.groupopt.met));
        } else if (self.groupopt.met == "random") {
            var arr = users.map(function (e) {
                e.rnd = Math.random();
                return e;
            });
            self.groups = generateTeams(arr, function (s) {
                return s.rnd;
            }, self.groupopt.num, false);
        } else if (self.selectedSes.type == "E") {
            var dfd = users.map(function (e) {
                var d = self.shared.dataDF || [];
                var r = d.find(function (f) {
                    return f.tmid == e.id;
                });
                console.log(r);
                return {
                    uid: e.id,
                    score: r && r.ind && r.ind.length > 0 ? r.ind.reduce(function (v, p) {
                        return v + p.sel;
                    }, 0) / r.ind.length : 0
                };
            });
            console.log(dfd);
            self.groups = generateTeams(dfd, function (s) {
                return s.score;
            }, self.groupopt.num, isDifferent(self.groupopt.met));
        } else if (self.selectedSes.type == "T") {
            var d = self.shared.difTable.filter(function (e) {
                return !e.group;
            });
            var _dfd = users.map(function (e) {
                var r = d.find(function (dd) {
                    return dd.uid == e.id;
                });
                return {
                    uid: e.id,
                    score: r && r.arr && r.arr.length > 0 ? r.arr.reduce(function (v, p) {
                        return v + (p.sel != null ? p.sel : -1);
                    }, 0) / r.arr.length : -1,
                    aprendizaje: e.aprendizaje
                };
            });
            self.groups = generateTeams(_dfd, function (s) {
                return s.score;
            }, self.groupopt.num, isDifferent(self.groupopt.met));
        } else if (self.selectedSes.type == "R") {
            var _dfd2 = users.map(function (e) {
                return {
                    uid: e.id,
                    score: self.shared.roleIndTable[e.id] ? self.shared.roleIndTable[e.id].lnum : -1,
                    aprendizaje: e.aprendizaje
                };
            });
            self.groups = generateTeams(_dfd2, function (s) {
                return s.score;
            }, self.groupopt.num, isDifferent(self.groupopt.met));
        } else if (self.groupopt.met == "expert") {
            var s = {};
            users.forEach(function (u) {
                if (!s[u.jigsawId]) s[u.jigsawId] = [];
                s[u.jigsawId].push(u);
            });
            self.groups = Object.values(s);
        } else if (self.groupopt.met == "wjigsaw") {
            (function () {
                var s = {};
                users.forEach(function (u) {
                    if (!s[u.jigsawId]) s[u.jigsawId] = [];
                    s[u.jigsawId].push(u);
                });
                var roles = Object.keys(s);
                var gs = [];
                var hasData = true;

                var _loop = function _loop(i) {
                    hasData = false;
                    var g = [];
                    roles.forEach(function (r) {
                        if (s[r][i]) {
                            hasData = true;
                            g.push(s[r][i]);
                        }
                    });
                    if (hasData) {
                        gs.push(g);
                    }
                };

                for (var i = 0; hasData; i++) {
                    _loop(i);
                }
                self.groups = gs;
            })();
        } else if (self.groupopt.met == "wjigsawrep") {
            (function () {
                var s = {};
                users.forEach(function (u) {
                    if (!s[u.jigsawId]) s[u.jigsawId] = [];
                    s[u.jigsawId].push(u);
                });
                var roles = Object.keys(s);
                var gs = [];
                var hasData = true;

                var _loop2 = function _loop2(i) {
                    hasData = false;
                    var g = [];
                    roles.forEach(function (r) {
                        if (s[r][i]) {
                            hasData = true;
                            g.push(s[r][i]);
                        }
                    });
                    if (hasData) {
                        gs.push(g);
                    }
                };

                for (var i = 0; hasData; i++) {
                    _loop2(i);
                }
                // CHECK MISSING ROLES IN LAST GROUP
                if (gs[0].length != gs[gs.length - 1].length) {
                    var lastgroup = gs.pop();
                    for (var i = 0; i < lastgroup.length; i++) {
                        gs[i % gs.length].push(lastgroup[i]);
                    }
                }
                self.groups = gs;
            })();
        }

        if (self.groups != null) {
            self.groupsProp = angular.copy(self.groups);
            self.groupNames = [];
        }

        /*if (urlRequest != "") {
            $http({url: urlRequest, method: "post", data: postdata}).success((data) => {
                self.groups = data;
                self.groupsProp = angular.copy(self.groups);
                console.log(data);
                self.groupNames = [];
                /*data.forEach((d) => {
                 self.groupNames.push(d.map(i => self.users[i.uid].name).join(", "));
                 });*
            });
        }*/
    };

    self.acceptGroups = function (stid) {
        if (self.groups == null) {
            Notification.error("No hay propuesta de grupos para fijar");
            return;
        }
        var postdata = {
            stageid: stid,
            groups: JSON.stringify(self.groups.map(function (e) {
                return e.map(function (f) {
                    return f.uid || f.id;
                });
            }))
        };
        console.log(postdata);
        $http({ url: "set-groups-stage", method: "post", data: postdata }).success(function (data) {
            if (data.status == "ok") {
                console.log("Groups accepted");
                self.selectedSes.grouped = true;
                // self.shared.verifyGroups();
            }
        });
    };

    self.formatStageNames = function (idstr) {
        if (idstr == null || idstr == "") return;
        var ids = idstr.split(",").map(function (e) {
            return +e;
        });
        return ids.map(function (i) {
            var s = self.stages.find(function (s) {
                return s.id == i;
            });
            return self.flang("stage") + " " + s.number;
        }).join(", ");
    };

    self.shared.openNextModal = function () {
        $uibModal.open({
            templateUrl: "templ/next-dialog.html",
            controller: function controller($scope, $http, $uibModalInstance, Notification, data) {
                var vm = this;
                vm.data = data;
                vm.radioval = null;

                vm.cancel = function () {
                    $uibModalInstance.dismiss('cancel');
                };

                vm.accept = function () {
                    if (vm.radioval == "F") {
                        $http.post("session-finish-stages", { sesid: self.selectedSes.id }).success(function (data) {
                            console.log("AAA");
                            console.log(data);
                        });
                    } else if (vm.radioval == "N") {
                        self.setTab("editor");
                        $uibModalInstance.dismiss('cancel');
                    }
                };
            },
            controllerAs: "vm",
            scope: self,
            resolve: {
                data: function data() {
                    return {};
                }
            }
        });
    };

    // self.swapTable = function (i, j) {
    //     console.log(i, j, self.groups);
    //     if (self.lastI == -1 && self.lastJ == -1) {
    //         self.lastI = i;
    //         self.lastJ = j;
    //         return;
    //     }
    //     if (!(self.lastI == i && self.lastJ == j)) {
    //         var temp = angular.copy(self.groupsProp[i][j]);
    //         self.groupsProp[i][j] = angular.copy(self.groupsProp[self.lastI][self.lastJ]);
    //         self.groupsProp[self.lastI][self.lastJ] = temp;
    //     }
    //     self.lastI = -1;
    //     self.lastJ = -1;
    // };

    self.getGrouping = function (gstr) {
        if (gstr == null || gstr == "") {
            return self.flang("prevGroups");
        }
        var cmps = gstr.split(":");
        var meths = cmps[1].split(" ");
        if (meths[0] == "jigsaw" || meths[0] == "expert") {
            return self.flang("groupingMethod") + ": " + klg(meths[0], meths[1]).name;
        }
        return self.flang("studentsPerGroup") + ": " + cmps[0] + ", " + self.flang("groupingMethod") + ": " + klg(meths[0], meths[1]).name;
    };

    self.addDF = function () {
        self.dfs.push({
            name: "",
            tleft: "",
            tright: "",
            num: 7,
            orden: self.dfs.length + 1,
            justify: true
        });
    };

    self.buildArray = function (n) {
        var a = [];
        for (var i = 1; i <= n; i++) {
            a.push(i);
        }
        return a;
    };

    self.inputAssignedRoles = function () {
        $http.post("get-assigned-jigsaw-roles", {
            sesid: self.selectedSes.id
        }).success(function (data) {
            data.forEach(function (d) {
                var u = self.users[d.userid];
                if (u) {
                    u.jigsaw = self.jroles.find(function (e) {
                        return e.id == d.roleid;
                    });
                    u.jigsawId = d.roleid;
                }
            });
            console.log(self.users);
        });
    };

    self.saveDraft = function () {
        var data = {
            dfs: self.dfs,
            roles: self.roles,
            jroles: self.jroles
        };
        var postdata = {
            sesid: self.selectedSes.id,
            data: JSON.stringify(data)
        };
        $http.post("save-draft", postdata).success(function (data) {
            Notification.success("Datos guardados");
        });
    };

    self.shared.inputAssignedRoles = self.inputAssignedRoles;
    self.shared.buildArray = self.buildArray;
    self.shared.getStages = self.getStages;

    self.getStages();
};

function groupByUser(data, acts) {
    var u = {};
    var jusOrder = acts.some(function (e) {
        return e.jorder;
    });
    data.forEach(function (d) {
        if (!u[d.uid]) {
            u[d.uid] = { arr: [], com: [], just: [] };
        }
        var a = jusOrder ? acts[u[d.uid].arr.length] : acts.find(function (e) {
            return e.id == d.actorid;
        });
        u[d.uid].arr.push(d.actorid);
        u[d.uid].com.push(d.description);
        u[d.uid].just.push(a && a.justified);
    });
    return u;
}

window.computePosFreqTable = function (data, actors) {
    if (data == null || actors == null || data.length == 0 || actors.length == 0) {
        return;
    }
    var countMap = {};
    actors.forEach(function (a) {
        countMap[a.id] = {};
    });

    data.forEach(function (d) {
        countMap[d.actorid][d.orden] = countMap[d.actorid][d.orden] ? countMap[d.actorid][d.orden] + 1 : 1;
    });

    // console.log(countMap);
    return countMap;
};

function lehmerCode(arr, acts) {
    var p = acts.map(function (e) {
        return e.id;
    });
    var perm = arr.map(function (e) {
        return e;
    });

    var n = p.length;
    var pos_map = {};
    p.forEach(function (e, i) {
        pos_map[e] = i;
    });

    var w = [];
    for (var i = 0; i < n; i++) {
        var d = pos_map[perm[i]] - i;
        w.push(d);
        if (d == 0) continue;
        var t = pos_map[perm[i]];

        var tmp = pos_map[p[t]];
        pos_map[p[t]] = pos_map[p[i]];
        pos_map[p[i]] = tmp;

        tmp = p[t];
        p[t] = p[i];
        p[i] = tmp;
    }

    return w;
}

function lehmerNum(code) {
    var n = 0;
    for (var i = 0; i < code.length; i++) {
        var v = code[code.length - i - 1];
        n *= i;
        n += v;
    }
    return n;
}

function simpleNum(code) {
    var n = 0;
    for (var i = 0; i < code.length; i++) {
        var v = code[code.length - i - 1];
        n *= code.length;
        n += v;
    }
    return n;
}

window.computeIndTable = function (data, actors) {
    var udata = groupByUser(data, actors);
    Object.values(udata).forEach(function (u) {
        u.code = lehmerCode(u.arr, actors);
        u.lnum = lehmerNum(u.code);

        u.perm = actors.map(function (e) {
            return u.arr.findIndex(function (s) {
                return s == e.id;
            });
        });
        u.pnum = simpleNum(u.perm);
    });

    var uarr = Object.values(udata);
    uarr.forEach(function (u) {
        u.ceq = uarr.filter(function (e) {
            return e.pnum == u.pnum;
        }).length;
    });

    return udata;
};

window.sortIndTable = function (table, users) {
    var us = Object.values(users).filter(function (e) {
        return e.role == "A";
    });
    us.forEach(function (u) {
        if (!table[u.id]) {
            table[u.id] = {
                arr: [],
                ceq: 0,
                lnum: -1
            };
        }
    });
    var arr = Object.entries(table).map(function (_ref) {
        var _ref2 = _slicedToArray(_ref, 2),
            uid = _ref2[0],
            e = _ref2[1];

        e.uid = uid;
        e.uid2 = uid;
        e.ceqlnum = e.ceq + e.pnum / 1e7;
        return e;
    });
    console.log(arr);
    return arr;
};

window.buildDifTable = function (data, users, dfs, gbu) {
    // console.log("DATA");
    // console.log(data);
    // console.log(users);
    // console.log(dfs);

    var res = [];
    var tmids = {};
    var us = Object.values(users).filter(function (e) {
        return e.role == "A";
    });

    var _loop3 = function _loop3(i) {
        var u = us[i];
        var row = {
            uid: u.id,
            arr: dfs.map(function (d) {
                return data.find(function (e) {
                    return e.uid == u.id && d.id == e.did;
                }) || { did: d.id };
            })
        };
        row.tmid = row.arr.find(function (e) {
            return e && e.tmid != null;
        }) ? row.arr.find(function (e) {
            return e && e.tmid != null;
        }).tmid : gbu && gbu[u.id] ? gbu[u.id].tmid : null;
        if (row.tmid != null) tmids[row.tmid] = true;
        res.push(row);
    };

    for (var i = 0; i < us.length; i++) {
        _loop3(i);
    }

    var tres = [];
    var avg = function avg(arr) {
        return arr.length > 0 ? arr.reduce(function (v, e) {
            return v + e;
        }, 0) / arr.length : 0;
    };
    var sdf = function sdf(arr) {
        if (arr.length <= 1) return 0;
        var av = avg(arr);
        var sd = 0;
        arr.forEach(function (a) {
            sd += (a - av) * (a - av);
        });
        return Math.sqrt(sd / (arr.length - 1)) / av;
    };
    Object.keys(tmids).forEach(function (t) {
        var r = res.filter(function (e) {
            return e.tmid == t;
        });
        var row = {
            uid: -t,
            tmid: +t,
            group: true,
            arr: dfs.map(function (e, i) {
                return {
                    sel: avg(r.map(function (e) {
                        return e.arr[i] ? e.arr[i].sel : null;
                    }).filter(function (e) {
                        return e;
                    })),
                    sd: sdf(r.map(function (e) {
                        return e.arr[i] ? e.arr[i].sel : null;
                    }).filter(function (e) {
                        return e;
                    })),
                    did: e.id
                };
            })
        };
        users[-t] = {
            name: "\u2022G" + t,
            type: "G"
        };
        tres.push(row);
    });

    res = res.concat(tres);
    // console.log("DIF TABLE");
    // console.log(res);

    return res;
};
